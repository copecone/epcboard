package io.github.copecone.epcboard.util.random

import java.security.SecureRandom

class SecureRNG: RandomNumberGenerator() {
    override val supportBatch = false
    private val randomInstance = SecureRandom()

    override fun getInt(): Int =
        if (intQueue.isEmpty()) getInt(Int.MIN_VALUE..Int.MAX_VALUE)
        else intQueue.poll()

    override fun getFloat(): Float =
        if (floatQueue.isEmpty()) getFloat(Float.MIN_VALUE..Float.MAX_VALUE)
        else floatQueue.poll()

    override fun getDouble(): Double =
        if (doubleQueue.isEmpty()) getDouble(Double.MIN_VALUE..Double.MAX_VALUE)
        else doubleQueue.poll()

    override fun getInt(range: IntRange): Int {
        if (!intQueue.isEmpty() && latestIntRange == range) return intQueue.poll()

        if (range.isEmpty()) throw IllegalArgumentException("Any number can't be generated by empty range")
        return randomInstance.nextInt(range.endInclusive - range.start) + range.start
    }

    override fun getFloat(range: FloatRange): Float {
        if (!floatQueue.isEmpty() && latestFloatRange == range) return floatQueue.poll()

        if (range.isEmpty()) throw IllegalArgumentException("Any number can't be generated by empty range")
        return randomInstance.nextFloat(range.endInclusive - range.start) + range.start
    }

    override fun getDouble(range: DoubleRange): Double {
        if (!doubleQueue.isEmpty() && latestDoubleRange == range) return doubleQueue.poll()

        if (range.isEmpty()) throw IllegalArgumentException("Any number can't be generated by empty range")
        return randomInstance.nextDouble(range.endInclusive - range.start) + range.start
    }
}