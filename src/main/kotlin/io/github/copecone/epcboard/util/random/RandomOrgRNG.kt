package io.github.copecone.epcboard.util.random

import io.github.copecone.epcboard.util.random.internal.RandomOrgAPI
import kotlinx.coroutines.runBlocking

class RandomOrgRNG: RandomNumberGenerator() {
    private val randomInstance = RandomOrgAPI
    override val supportBatch: Boolean = true

    override fun pregenerateInt(n: Int, range: IntRange) {
        if (range.isEmpty()) throw IllegalArgumentException("Any number can't be generated by empty range")
        if (latestIntRange != range) {
            latestIntRange = range
            intQueue.clear()
        }

        runBlocking { intQueue.addAll(RandomOrgAPI.generateInt(n, range)) }
    }

    override fun pregenerateFloat(n: Int, range: FloatRange) {
        if (range.isEmpty()) throw IllegalArgumentException("Any number can't be generated by empty range")
        if (latestFloatRange != range) {
            latestFloatRange = range
            floatQueue.clear()
        }

        runBlocking { floatQueue.addAll(RandomOrgAPI.generateFloat(n, range)) }
    }

    override fun pregenerateDouble(n: Int, range: DoubleRange) {
        if (range.isEmpty()) throw IllegalArgumentException("Any number can't be generated by empty range")
        if (latestDoubleRange != range) {
            latestDoubleRange = range
            doubleQueue.clear()
        }

        runBlocking { doubleQueue.addAll(RandomOrgAPI.generateDouble(n, range)) }
    }

    override fun getInt(): Int =
        if (intQueue.isEmpty()) getInt(RandomOrgAPI.validIntegerRange)
        else intQueue.poll()

    override fun getFloat(): Float =
        if (floatQueue.isEmpty()) getFloat(Float.MIN_VALUE..Float.MAX_VALUE)
        else floatQueue.poll()

    override fun getDouble(): Double =
        if (doubleQueue.isEmpty()) getDouble(Double.MIN_VALUE..Double.MAX_VALUE)
        else doubleQueue.poll()

    override fun getInt(range: IntRange): Int {
        if (!intQueue.isEmpty() && latestIntRange == range) return intQueue.poll()

        if (range.isEmpty()) throw IllegalArgumentException("Any number can't be generated by empty range")
        return runBlocking { randomInstance.generateInt(1, range)[0] }
    }

    override fun getFloat(range: FloatRange): Float {
        if (!floatQueue.isEmpty() && latestFloatRange == range) return floatQueue.poll()

        if (range.isEmpty()) throw IllegalArgumentException("Any number can't be generated by empty range")
        return runBlocking { randomInstance.generateFloat(1, range)[0] }
    }

    override fun getDouble(range: DoubleRange): Double {
        if (!doubleQueue.isEmpty() && latestDoubleRange == range) return doubleQueue.poll()

        if (range.isEmpty()) throw IllegalArgumentException("Any number can't be generated by empty range")
        return runBlocking { randomInstance.generateDouble(1, range)[0] }
    }
}